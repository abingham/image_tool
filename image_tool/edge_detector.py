from .convolution import convolve, Kernel
from .util import maximum

FALER = [
    Kernel(k)
    for k in
    [[[-1, 0, 1],
      [-1, 0, 1],
      [-1, 0, 1]],
     [[1, 1, 1],
      [0, 0, 0],
      [-1, -1, -1]],
     [[-1, -1, -1],
      [-1, 8, -1],
      [-1, -1, -1]],
     [[0, 1, 0],
      [-1, 0, 1],
      [0, -1, 0]]]]


KIRSH = [
    Kernel(k)
    for k in
    [[[5, 5, 5],
      [-3, 0, -3],
      [-3, -3, -3]],
     [[-3, 5, 5],
      [-3, 0, 5],
      [-3, -3, -3]],
     [[-3, -3, 5],
      [-3, 0, 5],
      [-3, -3, 5]],
     [[-3, -3, -3],
      [-3, 0, 5],
      [-3, 5, 5]],
     [[-3, -3, -3],
      [-3, 0, -3],
      [5, 5, 5]],
     [[-3, -3, -3],
      [5, 0, -3],
      [5, 5, -3]],
     [[5, -3, -3],
      [5, 0, -3],
      [5, -3, -3]],
     [[5, 5, -3],
      [5, 0, -3],
      [-3, -3, -3]]]]


PREWITT = [
    Kernel(k)
    for k in
    [[[1, 1, 1],
      [1, -2, 1],
      [-1, -1, -1]],
     [[1, 1, 1],
      [1, -2, -1],
      [1, -1, -1]],
     [[1, 1, -1],
      [1, -2, -1],
      [1, 1, -1]],
     [[1, -1, -1],
      [1, -2, -1],
      [1, 1, 1]],
     [[-1, -1, -1],
      [1, -2, 1],
      [1, 1, 1]],
     [[-1, -1, 1],
      [1, -2, 1],
      [1, 1, 1]],
     [[-1, 1, 1],
      [-1, -2, 1],
      [-1, 1, 1]],
     [[1, 1, 1],
      [-1, -2, 1],
      [-1, -1, 1]]]]


def detect_edges(src, height, width, kernels=FALER):
    convs = (convolve(src, height, width, k)
             for k in kernels)
    return maximum(*convs)
